*** BASIC STUF ***

- Use FastAPI as the framework for the application
- All endpoints should:
    x Return JSON objects
    x Use proper HTTP Status codes
    x Define all CRUD operations
    x Have a Swagger example
- Document the DB used with suitable diagrams using Mermaid
- Document a potential integration with another system using a Sequence diagram in Mermeid
- Design the application following a Layered Architecture. Having at least the following layers:
    Presentation (Routes/Views)
    x Application (Controller/Services)
    x Domain (Entities)
    x Persistence (Data).
- The Service layer should perform some business transformation on the data. Write the requirement that justifies that transformation
- The resources exposed through the HTTP API should not be the same as the one in the DB. I.e there should be a data transformation from the entities 
in the DB to the ones returned in the API. For example: API returns JSON in a denormalized way with and the DB stores data in a normalized way.
- The code should use Type-Hints throughout.
- Interactions with the database should be done through an ORM (e.g., SQLModel, SQLAlchemy)
- The API should be stateless and prepared to handle multiple (hundreds) of users concurrently.
- In addition to the CRUD endpoints, there should be one to use as a healthcheck and one for the version. Both unprotected.

Empleado
- id
- legajo
- cargos (lista)
- fecha_ingreso
- nombre
- apellido
- documento

Cargo
- id
- descripcion
- fecha_inicio
- fecha_fin
- importe 

Deducciones 
- id
- descripcion
- fecha
- importe

Bono
- id
- descripcion
- fecha

Liquidacion
- id
- fecha
- idUsuario
- importe

-Director
-Secretario
-Lider
-Senio
-Semi Senio
-Junior
-Trainner

Algunas deducciones son
-llegada tarde
-salida temprano
-falta
